<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Interop.Dynamic</name></assembly>
<members>
<member name="M:FSharp.Interop.Dynamic.Dyn.invoke``1(System.Object,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 *OBSOLETE*
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.subtractAssignMember(System.Object,System.String,System.Object)">
<summary>
 *OBSOLETE*
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.addAssignMember(System.Object,System.String,System.Object)">
<summary>
 *OBSOLETE*
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.setIndex``1(System.Object,System.Collections.Generic.IEnumerable{``0},System.Object)">
<summary>
 *OBSOLETE*
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.getIndex``2(System.Object,System.Collections.Generic.IEnumerable{``0})">
<summary>
 *OBSOLETE*
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.getIndexer``2(System.Collections.Generic.IEnumerable{``0},System.Object)">
<summary>
dynamically call get index
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.invokeGeneric``2(System.String,System.Collections.Generic.IEnumerable{System.Type},``0,System.Object)">
<summary>
calls member and specify&apos;s generic parameters and whose result can be called like a function
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.invokeMember``2(System.String,``0,System.Object)">
<summary>
calls member whose result can be called like a function
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.invokeDirect``2(``0,System.Object)">
<summary>
allows result to be called like a function
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.invocation``1(System.Object,FSharp.Interop.Dynamic.Calling)">
<summary>
 main workhouse method; Some(methodName) or just None to invoke without name;
 infered casting with automatic implicit convert.
 target not last because result could be infered to be fsharp style curried function
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.memberSubtractAssign(System.String,System.Object,System.Object)">
<summary>
Dynamically call `-=` on member
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.memberAddAssign(System.String,System.Object,System.Object)">
<summary>
Dynamically call `+=` on member
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.namedArg(System.String,System.Object)">
<summary>
allow marking args with names for dlr invoke
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.explicitConvert``1(System.Object)">
<summary>
explicit convert via inferred type
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.explicitConvertTo``1(System.Type,System.Object)">
<summary>
explicit convert via reflected type
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.implicitConvert``1(System.Object)">
<summary>
implict convert via inferred type
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.implicitConvertTo``1(System.Type,System.Object)">
<summary>
implict convert via reflected type
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.Dyn.staticContext(System.Type)">
<summary>
allow access to static context for dynamic invocation of static methods
</summary>
</member>
<member name="T:FSharp.Interop.Dynamic.Dyn">
<summary>
Functions backing the operators and more
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.TopLevelOperators.op_BangQmark``1(System.Object)">
<summary>
 Prefix operator that allows direct dynamic invocation of the object
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.TopLevelOperators.op_DynamicAssignment``1(System.Object,System.String,``0)">
<summary>
 Dynamic set property
</summary>
</member>
<member name="M:FSharp.Interop.Dynamic.TopLevelOperators.op_Dynamic``1(System.Object,System.String)">
<summary>
 Dynamic get property or method invocation
</summary>
</member>
<member name="T:FSharp.Interop.Dynamic.TopLevelOperators">
<summary>
 Main operators for dynamic invocation
</summary>
</member>
<member name="T:FSharp.Interop.Dynamic.Operators">
<summary>
 Additional operators to dyanmically do normal operations
</summary>
</member>
</members>
</doc>
